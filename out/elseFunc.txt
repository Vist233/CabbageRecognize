# Function to select an image
def select_image():
    file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.png;*.jpg;*.jpeg")])
    if file_path:
        img = Image.open(file_path)
        img.thumbnail((400, 400))
        img = ImageTk.PhotoImage(img)
        panel.config(image=img)
        panel.image = img

        # Process the image and display results
        result = process_image(file_path)
        if result:
            result_text.set(f"Filename: {result[0]}\nGreen Ratio: {result[1]:.2%}\nWhite Ratio: {result[2]:.2%}\nBall Shape: {result[3]}\nHug Type: {result[4]}")
        else:
            result_text.set("Error processing the image.")

# Function to apply a filter to the image
def apply_filter(filter_type):
    if panel.image:
        img = panel.image._PhotoImage__photo.zoom(1)  # Get the original image
        pil_img = Image.frombytes("RGB", img.size, img.tobytes())
        if filter_type == "BLUR":
            pil_img = pil_img.filter(ImageFilter.BLUR)
        elif filter_type == "CONTOUR":
            pil_img = pil_img.filter(ImageFilter.CONTOUR)
        elif filter_type == "DETAIL":
            pil_img = pil_img.filter(ImageFilter.DETAIL)
        elif filter_type == "EDGE_ENHANCE":
            pil_img = pil_img.filter(ImageFilter.EDGE_ENHANCE)
        elif filter_type == "SHARPEN":
            pil_img = pil_img.filter(ImageFilter.SHARPEN)
        
        img = ImageTk.PhotoImage(pil_img)
        panel.config(image=img)
        panel.image = img

# Function to rotate the image
def rotateaaaa_image(angle):
    if panel.image:
        img = panel.image._PhotoImage__photo.zoom(1)  # Get the original image
        pil_img = Image.frombytes("RGB", img.size, img.tobytes())
        pil_img = pil_img.rotate(angle)
        img = ImageTk.PhotoImage(pil_img)
        panel.config(image=img)
        panel.image = img

# Function to scale the image
def scaleaa_image(scale_factor):
    if panel.image:
        img = panel.image._PhotoImage__photo.zoom(1)  # Get the original image
        pil_img = Image.frombytes("RGB", img.size, img.tobytes())
        width, height = pil_img.size
        pil_img = pil_img.resize((int(width * scale_factor), int(height * scale_factor)))
        img = ImageTk.PhotoImage(pil_img)
        panel.config(image=img)
        panel.image = img

# Function to show histogram
def show_histogram():
    if panel.image:
        img = panel.image._PhotoImage__photo.zoom(1)  # Get the original image
        pil_img = Image.frombytes("RGB", img.size, img.tobytes())
        img_array = np.array(pil_img)
        plt.figure()
        plt.hist(img_array.ravel(), bins=256, color='orange', )
        plt.hist(img_array[:, :, 0].ravel(), bins=256, color='red', alpha=0.5)
        plt.hist(img_array[:, :, 1].ravel(), bins=256, color='Green', alpha=0.5)
        plt.hist(img_array[:, :, 2].ravel(), bins=256, color='Blue', alpha=0.5)
        plt.xlabel('Intensity Value')
        plt.ylabel('Count')
        plt.legend(['Total', 'Red_Channel', 'Green_Channel', 'Blue_Channel'])
        plt.show()

# Function to save the processed image
def saveaa_image():
    if panel.image:
        file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG files", "*.png"), ("JPEG files", "*.jpg;*.jpeg")])
        if file_path:
            img = panel.image._PhotoImage__photo.zoom(1)  # Get the original image
            pil_img = Image.frombytes("RGB", img.size, img.tobytes())
            pil_img.save(file_path)
            messagebox.showinfo("Image Saved", f"Image saved as {file_path}")

# Function to adjust brightness
def adjustaa_brightness(factor):
    if panel.image:
        img = panel.image._PhotoImage__photo.zoom(1)  # Get the original image
        pil_img = Image.frombytes("RGB", img.size, img.tobytes())
        enhancer = ImageEnhance.Brightness(pil_img)
        pil_img = enhancer.enhance(factor)
        img = ImageTk.PhotoImage(pil_img)
        panel.config(image=img)
        panel.image = img

# Function to adjust contrast
def adjustaa_contrast(factor):
    if panel.image:
        img = panel.image._PhotoImage__photo.zoom(1)  # Get the original image
        pil_img = Image.frombytes("RGB", img.size, img.tobytes())
        enhancer = ImageEnhance.Contrast(pil_img)
        pil_img = enhancer.enhance(factor)
        img = ImageTk.PhotoImage(pil_img)
        panel.config(image=img)
        panel.image = img

# Function to adjust brightness
def adjust_brightness(factor):
    if panel.image:
        img = panel.image._PhotoImage__photo.zoom(1)  # Get the original image
        pil_img = Image.frombytes("RGB", img.size, img.tobytes())
        enhancer = ImageEnhance.Brightness(pil_img)
        pil_img = enhancer.enhance(factor)
        img = ImageTk.PhotoImage(pil_img)
        panel.config(image=img)
        panel.image = img

# Function to crop image
def crop_image(image_path, crop_box, output_filename):
    """
    Crop the image to the specified box and save the result.
    """
    image = Image.open(image_path)
    cropped_image = image.crop(crop_box)
    cropped_image.save(output_filename)
    print(f"Image saved as {output_filename}")

# Function to convert image to grayscale
def convert_to_grayscale(image_path, output_filename):
    """
    Convert the image to grayscale and save the result.
    """
    image = Image.open(image_path)
    grayscale_image = image.convert("L")
    grayscale_image.save(output_filename)
    print(f"Image saved as {output_filename}")
    
def flip_image(image_path, direction, output_filename):
    """
    Flip the image in the specified direction ('horizontal' or 'vertical') and save the result.
    """
    image = Image.open(image_path)
    if direction == 'horizontal':
        flipped_image = image.transpose(Image.FLIP_LEFT_RIGHT)
    elif direction == 'vertical':
        flipped_image = image.transpose(Image.FLIP_TOP_BOTTOM)
    else:
        raise ValueError("Direction must be 'horizontal' or 'vertical'")
    flipped_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def blur_image(image_path, radius, output_filename):
    """
    Apply a blur filter to the image with the specified radius and save the result.
    """
    image = Image.open(image_path)
    blurred_image = image.filter(ImageFilter.GaussianBlur(radius))
    blurred_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def edge_detect_image(image_path, output_filename):
    """
    Apply an edge detection filter to the image and save the result.
    """
    image = Image.open(image_path)
    edge_detected_image = image.filter(ImageFilter.FIND_EDGES)
    edge_detected_image.save(output_filename)
    print(f"Image saved as {output_filename}")
    
def scale_image(image_path, scale_factor, output_filename):
    """
    Scale the image by the specified factor and save the result.
    """
    image = Image.open(image_path)
    new_size = (int(image.width * scale_factor), int(image.height * scale_factor))
    scaled_image = image.resize(new_size, Image.ANTIALIAS)
    scaled_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def sharpena_image(image_path, output_filename):
    """
    Apply a sharpen filter to the image and save the result.
    """
    image = Image.open(image_path)
    sharpened_image = image.filter(ImageFilter.SHARPEN)
    sharpened_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def adjust_contrast(image_path, factor, output_filename):
    """
    Adjust the contrast of the image by the specified factor and save the result.
    """
    image = Image.open(image_path)
    enhancer = ImageEnhance.Contrast(image)
    contrast_image = enhancer.enhance(factor)
    contrast_image.save(output_filename)
    print(f"Image saved as {output_filename}")
    
def rotateaa_image(image_path, angle, output_filename):
    """
    Rotate the image by a specified angle and save the result.
    """
    image = Image.open(image_path)
    rotated_image = image.rotate(angle)
    rotated_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def mirroraa_image(image_path, output_filename):
    """
    Create a mirror image (flip horizontally) and save the result.
    """
    image = Image.open(image_path)
    mirrored_image = image.transpose(Image.FLIP_LEFT_RIGHT)
    mirrored_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def invertaa_colors(image_path, output_filename):
    """
    Invert the colors of the image and save the result.
    """
    image = Image.open(image_path)
    inverted_image = ImageOps.invert(image.convert("RGB"))
    inverted_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def adjust_saturation(image_path, factor, output_filename):
    """
    Adjust the saturation of the image by the specified factor and save the result.
    """
    image = Image.open(image_path)
    enhancer = ImageEnhance.Color(image)
    saturated_image = enhancer.enhance(factor)
    saturated_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def smooth_image(image_path, output_filename):
    """
    Apply a smoothing filter to the image and save the result.
    """
    image = Image.open(image_path)
    smoothed_image = image.filter(ImageFilter.SMOOTH)
    smoothed_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def contour_image(image_path, output_filename):
    """
    Apply a contour filter to the image and save the result.
    """
    image = Image.open(image_path)
    contoured_image = image.filter(ImageFilter.CONTOUR)
    contoured_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def add_noise(image_path, output_filename, noise_level=0.1):
    """
    Add random noise to the image and save the result.
    """
    image = Image.open(image_path)
    np_image = np.array(image)
    noise = np.random.normal(0, noise_level, np_image.shape)
    noisy_image = np.clip(np_image + noise * 255, 0, 255).astype(np.uint8)
    noisy_image = Image.fromarray(noisy_image)
    noisy_image.save(output_filename)
    print(f"Image saved as {output_filename}")
    
def rotatea_image(image_path, angle, output_filename):
    """
    Rotate the image by a specified angle and save the result.
    """
    image = Image.open(image_path)
    rotated_image = image.rotate(angle)
    rotated_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def mirror_image(image_path, output_filename):
    """
    Create a mirror image (flip horizontally) and save the result.
    """
    image = Image.open(image_path)
    mirrored_image = image.transpose(Image.FLIP_LEFT_RIGHT)
    mirrored_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def invert_colors(image_path, output_filename):
    """
    Invert the colors of the image and save the result.
    """
    image = Image.open(image_path)
    inverted_image = ImageOps.invert(image.convert("RGB"))
    inverted_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def add_watermark(image_path, watermark_path, position, output_filename):
    """
    Add a watermark to the image at the specified position and save the result.
    """
    image = Image.open(image_path)
    watermark = Image.open(watermark_path).convert("RGBA")
    image.paste(watermark, position, watermark)
    image.save(output_filename)
    print(f"Image saved as {output_filename}")

def rotate_image(image_path, angle, output_filename):
    """
    Rotate the image by a specified angle and save the result.
    """
    image = Image.open(image_path)
    rotated_image = image.rotate(angle)
    rotated_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def resize_image(image_path, size, output_filename):
    """
    Resize the image to the specified size and save the result.
    """
    image = Image.open(image_path)
    resized_image = image.resize(size)
    resized_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def sharpen_image(image_path, output_filename):
    """
    Sharpen the image and save the result.
    """
    image = Image.open(image_path)
    enhancer = ImageEnhance.Sharpness(image)
    sharpened_image = enhancer.enhance(2.0)  # Increase sharpness by a factor of 2
    sharpened_image.save(output_filename)
    print(f"Image saved as {output_filename}")

def save_image(image, output_path):
    """
    Save the image to the specified path.
    """
    image.save(output_path)
    print(f"Image saved as {output_path}")

def open_image():
    global img, panel
    file_path = filedialog.askopenfilename()
    if file_path:
        img = Image.open(file_path)
        img.thumbnail((400, 400))
        img_tk = ImageTk.PhotoImage(img)
        panel.config(image=img_tk)
        panel.image = img_tk

def rotate_image_ui():
    global img
    if img:
        rotated_img = img.rotate(45)
        img_tk = ImageTk.PhotoImage(rotated_img)
        panel.config(image=img_tk)
        panel.image = img_tk

def resize_image_ui():
    global img
    if img:
        resized_img = img.resize((200, 200))
        img_tk = ImageTk.PhotoImage(resized_img)
        panel.config(image=img_tk)
        panel.image = img_tk

def sharpen_image_ui():
    global img
    if img:
        enhancer = ImageEnhance.Sharpness(img)
        sharpened_img = enhancer.enhance(2.0)
        img_tk = ImageTk.PhotoImage(sharpened_img)
        panel.config(image=img_tk)
        panel.image = img_tk


# 在左侧Frame中创建按钮
btn_histogram = tk.Button(left_frame, text="Histogram", command=lambda: print("Histogram"))
btn_histogram.pack()
btn_save = tk.Button(left_frame, text="Save Image", command=lambda: print("Save Image"))
btn_save.pack()
btn_brightness_up = tk.Button(left_frame, text="Brightness Up", command=lambda: print("Brightness Up"))
btn_brightness_up.pack()
btn_brightness_down = tk.Button(left_frame, text="Brightness Down", command=lambda: print("Brightness Down"))
btn_brightness_down.pack()
btn_contrast_up = tk.Button(left_frame, text="Contrast Up", command=lambda: print("Contrast Up"))
btn_contrast_up.pack()
btn_contrast_down = tk.Button(left_frame, text="Contrast Down", command=lambda: print("Contrast Down"))
btn_contrast_down.pack()



